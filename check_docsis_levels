#!/bin/bash

FREQUENCY=transmission.127.1.1.1.1.2.3
WIDTH=transmission.127.1.1.1.1.3.3
#QAM_TYPE=transmission.127.1.1.1.1.4.3
FEC=transmission.127.1.1.1.1.5.3
DOWNSTREAM_POWER=transmission.127.1.1.1.1.6.3
SNR=transmission.127.1.1.4.1.5.3
UPSTREAM_POWER=transmission.127.1.2.2.1.3.2
TOTAL_LOST_SYNC=transmission.127.1.2.2.1.5.2
ERROR_LEVEL=0

#Recommendations in accordance with: http://www.dslreports.com/faq/3412

function power_calculator () {
        DSP_BY_TEN=$(echo "scale=1; $DSP / 10" | bc)
        USP_BY_TEN=$(echo "scale=1; $USP / 10" | bc)
        SNR_BY_TEN=$(echo "scale=1; $SNR / 10" | bc)
}

function dsp_check () {
        if [ "$DSP" -ge "150" ]; then
                echo -n "DSP High:$DSP_BY_TEN db (recommended: '-15db'-'+15db'), "
                let ERROR_LEVEL="$ERROR_LEVEL + 1"
        elif [ "$DSP" -le "-150" ]; then
                echo -n "DSP Low:$DSP_BY_TEN db (recommended: '-15db'-'+15db'), "
                let ERROR_LEVEL="$ERROR_LEVEL + 1"
        else
                echo -n "DSP OK:$DSP_BY_TEN db, "
        fi
}

function usp_check () {
        if [ "$USP" -ge "550" ]; then
                echo -n "USP High:$USP_BY_TEN db (recommended under 55db), "
                let ERROR_LEVEL="$ERROR_LEVEL + 1"
        else
                echo -n "USP OK:$USP_BY_TEN db, "
        fi
}

function check_snr () {
        if [ "$SNR" -le "250" ]; then
                echo -n "SNR Low:$SNR_BY_TEN (recommended over 29db). "
                let ERROR_LEVEL="$ERROR_LEVEL + 1"
        elif [ "$SNR" -ge "250" ] && [ "$SNR" -le "290" ]; then
                echo -n "SNR Low:$SNR_BY_TEN (recommended over 29db). "
                let ERROR_LEVEL="$ERROR_LEVEL + 1"
        else
                echo -n "SNR OK:$SNR_BY_TEN db."
        fi
}

function error_level_check () {
        if [ "$ERROR_LEVEL" = "0" ]; then
                exit 0
        else
                exit 2
        fi
}

function get_values () {
	FREQ=$(snmpwalk -v2c -c $STRING $IP $FREQUENCY | awk '{print $4}')
	WID=$(snmpwalk -v2c -c $STRING $IP $WIDTH | awk '{print $4}')
	FEC=$(snmpwalk -v2c -c $STRING $IP $FEC | awk '{print $4}')
	DSP=$(snmpwalk -v2c -c $STRING $IP $DOWNSTREAM_POWER | awk '{print $4}')
	USP=$(snmpwalk -v2c -c $STRING $IP $UPSTREAM_POWER | awk '{print $4}')
	SNR=$(snmpwalk -v2c -c $STRING $IP $SNR | awk '{print $4}')
	TOTAL_LOST=$(snmpwalk -v2c -c $STRING $IP $TOTAL_LOST_SYNC | awk '{print $4}')

	power_calculator
	dsp_check
	usp_check
	check_snr
	error_level_check
}

function check_snmp () {
        CHECK=.1.3.6.1.2.1.1.9.1.4.1
        snmpget -v2c -c $STRING $IP $CHECK > /dev/null 2>&1
        if [ $? -gt "0" ]; then
                echo "Unable to SNMP to $IP, exiting."
                exit 2
        else
                get_values
        fi
}

function tunnel_snmp () {
	ssh -o "ExitOnForwardFailure=yes" root@$TUNNEL 'bash -s' < /usr/lib/nagios/plugins/check_docsis_levels check $STRING $IP
}

check_values () {
if [ -z $STRING ]; then
        echo "No community string defined, exiting"
        exit 2
elif [ -z $IP ]; then
        echo "No IP defined, exiting"
        exit 2
fi
if [ -z $TUNNEL ]; then
	check_snmp
else
	tunnel_snmp
fi
}


case "$1" in
	check)
		IP=$3
		STRING=$2
		TUNNEL=$4
		check_values
		;;
	*)
		echo "Usage: $0 {check}"
		exit 2
		;;
esac

